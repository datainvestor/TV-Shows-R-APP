SampDist
a <- 4      # The min and max values we will use for this example
b <- 10     # Could be anything, but we need to pick something
x <- runif(n=1, 0,10)  #
x
x
x
x
x
x
dunif(x, a, b)
dunif(x, a, b)
dunif(x, a, b)
x
dunif(x, a, b)
x
dunif(x, a, b)
a <- 4      # The min and max values we will use for this example
b <- 10     # Could be anything, but we need to pick something
x <- runif(n=1, 0,10)  #
x
a <- 4      # The min and max values we will use for this example
b <- 10     # Could be anything, but we need to pick something
x <- runif(n=1, 0,10)  #
x
if( x < a ){
result <- 0
}else if( x <= b ){
result <- 1/(b-a)
}else{
result <- 0
}
a <- 4      # The min and max values we will use for this example
b <- 10     # Could be anything, but we need to pick something
x <- runif(n=1, 0,10)  #
x
if( x < a ){
result <- 0
}else if( x <= b ){
result <- 1/(b-a)
}else{
result <- 0
}
a <- 4      # The min and max values we will use for this example
b <- 10     # Could be anything, but we need to pick something
x <- runif(n=1, 0,10)  #
x
if( x < a ){
result <- 0
}else if( x <= b ){
result <- 1/(b-a)
}else{
result <- 0
}
a <- 4      # The min and max values we will use for this example
b <- 10     # Could be anything, but we need to pick something
x <- runif(n=1, 0,10)  #
x
if( x < a ){
result <- 0
}else if( x <= b ){
result <- 1/(b-a)
}else{
result <- 0
}
a <- 4      # The min and max values we will use for this example
b <- 10     # Could be anything, but we need to pick something
x <- runif(n=1, 0,10)  #
x
if( x < a ){
result <- 0
}else if( x <= b ){
result <- 1/(b-a)
}else{
result <- 0
}
a <- 4      # The min and max values we will use for this example
b <- 10     # Could be anything, but we need to pick something
x <- runif(n=1, 0,10)  #
x
if( x < a ){
result <- 0
}else if( x <= b ){
result <- 1/(b-a)
}else{
result <- 0
}
if(a<=x & x<=b){
result<-1/(b-a)
}else{
result<
print(paste('x=',round(x,digits=3), '  result=', round(result,digits=3)))
/
x <- runif(n=1, 0,10)  # one random value between 0 and 10
if( (a<=x) & (x<=b) ){
result <- 1/(b-a)
}else{
result <- 0
}
print(paste('x=',round(x,digits=3), '  result=', round(result,digits=3)))
x <- runif(n=1, 0,10)  # one random value between 0 and 10
if( (a<=x) & (x<=b) ){
result <- 1/(b-a)
}else{
result <- 0
}
print(paste('x=',round(x,digits=3), '  result=', round(result,digits=3)))
x <- runif(n=1, 0,10)  # one random value between 0 and 10
if( (a<=x) & (x<=b) ){
result <- 1/(b-a)
}else{
result <- 0
}
print(paste('x=',round(x,digits=3), '  result=', round(result,digits=3)))
x <- runif(n=1, 0,10)  # one random value between 0 and 10
if( (x<a) | (b<x) ){
result <- 0
}else{
result <- 1/(b-a)
}
print(paste('x=',round(x,digits=3), '  result=', round(result,digits=3)))
x <- runif(n=1, 0,10)  # one random value between 0 and 10
if( (x<a) | (b<x) ){
result <- 0
}else{
result <- 1/(b-a)
}
print(paste('x=',round(x,digits=3), '  result=', round(result,digits=3)))
x <- runif(n=1, 0,10)  # one random value between 0 and 10
if( (x<a) | (b<x) ){
result <- 0
}else{
result <- 1/(b-a)
}
print(paste('x=',round(x,digits=3), '  result=', round(result,digits=3)))
x <- runif(n=1, 0,10)  # one random value between 0 and 10
if( (x<a) | (b<x) ){
result <- 0
}else{
result <- 1/(b-a)
}
print(paste('x=',round(x,digits=3), '  result=', round(result,digits=3)))
x <- runif(n=1, 0,10)  # one random value between 0 and 10
if( (x<a) | (b<x) ){
result <- 0
}else{
result <- 1/(b-a)
}
print(paste('x=',round(x,digits=3), '  result=', round(result,digits=3)))
x <- runif(n=1, 0,10)  # one random value between 0 and 10
if( (x<a) | (b<x) ){
result <- 0
}else{
result <- 1/(b-a)
}
print(paste('x=',round(x,digits=3), '  result=', round(result,digits=3)))
x <- runif(n=1, 0,10)  # one random value between 0 and 10
result <- ifelse( a<x & x<b, 1/(b-a), 0 )
print(paste('x=',round(x,digits=3), '  result=', round(result,digits=3)))
x <- runif(n=1, 0,10)  # one random value between 0 and 10
result <- ifelse( a<x & x<b, 1/(b-a), 0 )
print(paste('x=',round(x,digits=3), '  result=', round(result,digits=3)))
x <- runif(n=1, 0,10)  # one random value between 0 and 10
result <- ifelse( a<x & x<b, 1/(b-a), 0 )
print(paste('x=',round(x,digits=3), '  result=', round(result,digits=3)))
library(ggplot2)
df <- 4
N <- 1000
x <- seq(-4, 4, length=N)
data <- data.frame(
x = c(x,x),
y = c(dnorm(x), dt(x, df)),
type = c( rep('Normal',N), rep('T',N) ) )
data
x
type
df
myplot <- ggplot(data, aes(x=x, y=y, color=type, linetype=type)) +
geom_line() +
labs(title = paste('Std Normal vs t with', df, 'degrees of freedom'))
# actually print the nice graph we made
print(myplot)
df <- 3
N <- 1000
x <- seq(-4, 4, length=N)
data <- data.frame(
x = c(x,x),
y = c(dnorm(x), dt(x, df)),
type = c( rep('Normal',N), rep('T',N) ) )
library(ggplot2)
df <- 3
N <- 1000
x <- seq(-4, 4, length=N)
data <- data.frame(
x = c(x,x),
y = c(dnorm(x), dt(x, df)),
type = c( rep('Normal',N), rep('T',N) ) )
myplot <- ggplot(data, aes(x=x, y=y, color=type, linetype=type)) +
geom_line() +
labs(title = paste('Std Normal vs t with', df, 'degrees of freedom'))
df <- 29
N <- 1000
x <- seq(-4, 4, length=N)
data <- data.frame(
x = c(x,x),
y = c(dnorm(x), dt(x, df)),
type = c( rep('Normal',N), rep('T',N) ) )
myplot <- ggplot(data, aes(x=x, y=y, color=type, linetype=type)) +
geom_line() +
labs(title = paste('Std Normal vs t with', df, 'degrees of freedom'))
df <- 29
N <- 1000
x <- seq(-4, 4, length=N)
data <- data.frame(
x = c(x,x),
y = c(dnorm(x), dt(x, df)),
type = c( rep('Normal',N), rep('T',N) ) )
myplot <- ggplot(data, aes(x=x, y=y, color=type, linetype=type)) +
geom_line() +
labs(title = paste('Std Normal vs t with', df, 'degrees of freedom'))
# actually print the nice graph we made
print(myplot)
while(x<30){
df <- x
N <- 1000
x <- seq(-4, 4, length=N)
data <- data.frame(
x = c(x,x),
y = c(dnorm(x), dt(x, df)),
type = c( rep('Normal',N), rep('T',N) ) )
myplot <- ggplot(data, aes(x=x, y=y, color=type, linetype=type)) +
geom_line() +
labs(title = paste('Std Normal vs t with', df, 'degrees of freedom'))
# actually print the nice graph we made
print(myplot)
x<-x+1
}
x<-2
while(x<30){
df <- x
N <- 1000
x <- seq(-4, 4, length=N)
data <- data.frame(
x = c(x,x),
y = c(dnorm(x), dt(x, df)),
type = c( rep('Normal',N), rep('T',N) ) )
myplot <- ggplot(data, aes(x=x, y=y, color=type, linetype=type)) +
geom_line() +
labs(title = paste('Std Normal vs t with', df, 'degrees of freedom'))
# actually print the nice graph we made
print(myplot)
x<-x+1
}
for (x in 2:30){
df <- x
N <- 1000
x <- seq(-4, 4, length=N)
data <- data.frame(
x = c(x,x),
y = c(dnorm(x), dt(x, df)),
type = c( rep('Normal',N), rep('T',N) ) )
myplot <- ggplot(data, aes(x=x, y=y, color=type, linetype=type)) +
geom_line() +
labs(title = paste('Std Normal vs t with', df, 'degrees of freedom'))
# actually print the nice graph we made
print(myplot)
}
for (x in c(2,3,4,5,10,15,20,25,30)){
df <- x
N <- 1000
x <- seq(-4, 4, length=N)
data <- data.frame(
x = c(x,x),
y = c(dnorm(x), dt(x, df)),
type = c( rep('Normal',N), rep('T',N) ) )
myplot <- ggplot(data, aes(x=x, y=y, color=type, linetype=type)) +
geom_line() +
labs(title = paste('Std Normal vs t with', df, 'degrees of freedom'))
# actually print the nice graph we made
print(myplot)
}
mu    <- 0
sigma <- 1
x <- rnorm(1, mean=mu, sd=sigma)
x
x
mu    <- 0
sigma <- 1
x <- rnorm(1, mean=mu, sd=sigma)
xx
x
mu    <- 0
sigma <- 1
x <- rnorm(1, mean=mu, sd=sigma)
while(x<0){
x <- rnorm(1, mean=mu, sd=sigma)
}
x
mu    <- 0
sigma <- 1
x <- rnorm(1, mean=mu, sd=sigma)
while(x<0){
x <- rnorm(1, mean=mu, sd=sigma)
}
mu    <- 0
sigma <- 1
x <- rnorm(1, mean=mu, sd=sigma)
while(x<0){
x <- rnorm(1, mean=mu, sd=sigma)
}
mu    <- 0
sigma <- 1
x <- rnorm(1, mean=mu, sd=sigma)
while(x<0){
x <- rnorm(1, mean=mu, sd=sigma)
}
mu    <- 0
sigma <- 1
x <- rnorm(1, mean=mu, sd=sigma)
while(x<0){
x <- rnorm(1, mean=mu, sd=sigma)
print(x)
}
mu    <- 0
sigma <- 1
x <- rnorm(1, mean=mu, sd=sigma)
while(x<0){
x <- rnorm(1, mean=mu, sd=sigma)
print(x)
}
mu    <- 0
sigma <- 1
x <- rnorm(1, mean=mu, sd=sigma)
while(x<0){
x <- rnorm(1, mean=mu, sd=sigma)
print(x)
}
mu    <- 0
sigma <- 1
x <- rnorm(1, mean=mu, sd=sigma)
while(x<0){
x <- rnorm(1, mean=mu, sd=sigma)
print(x)
}
mu    <- 0
sigma <- 1
x <- rnorm(1, mean=mu, sd=sigma)
while(x<0){
x <- rnorm(1, mean=mu, sd=sigma)
print(x)
}
library(microbenchmark)  # for measuring how long stuff takes
library(doMC)      # do multi-core stuff
library(foreach)   # parallelizable for loops
library(ggplot2)
library(dplyr)
library(faraway)   # some examples
library(boot)
library(caret)
library(glmnet)
install.packages("microbenchmark")
install.packages("foreach")
install.packages("faraway")
library(microbenchmark)  # for measuring how long stuff takes
library(doMC)      # do multi-core stuff
library(foreach)   # parallelizable for loops
library(ggplot2)
library(dplyr)
library(faraway)   # some examples
library(boot)
library(caret)
library(glmnet)
x <- runif(1000)
microbenchmark(
sqrt(x),         # First expression to compare
x^(0.5)          # second expression to compare
) %>% print(digits=3)
make.data <- function(n){
data <- cbind(
rnorm(n, mean=5, sd=2),
rpois(n, lambda = 5),
rgamma(n, shape = 2, scale = 3),
rexp(n, rate = 1/5))
data <- data.frame(data)
return(data)
}
data <- make.data(100)
data
f1 <- function( input ){
output <- NULL
for( i in 1:nrow(input) ){
output[i] <- which.max( input[i,] )
}
return(output)
}
f1
f2.noReturn <- function( input ){
output <- NULL
for( i in 1:nrow(input) ){
output[i] <- which.max( input[i,] )
}
output
}
View(f1)
f1(data)
d2.noReturn(data)
f2.noReturn(data)
data <- make.data(100)
microbenchmark(
f1(data),
f2.noReturn(data)
) %>% print(digits=3)
f4.apply <- function( input ){
output <- apply(input, 1, which.max)
return(output)
}
microbenchmark(
f1(data),
f4.apply(data)
) %>% print(digits=3)
f5.dplyr <- function( input ){
output <- input %>%
mutate( max.col=which.max( c(X1, X2, X3, X4) ) )
return(output$max.col)
}
microbenchmark(
f4.apply(data),
f5.dplyr(data)
) %>% print(digits=3)
data <- make.data(100000)
microbenchmark(
f4.apply(data),
f5.dplyr(data)
) %>% print(digits=3)
install.packages("doMC")
install.packages("doPa")
install.packages("doParallel")
model <- lm( Volume ~ Girth, data=trees)
my.fun <- function(df, index){
model.star <- lm( Volume ~ Girth, data= trees[index,] )
model.star$coefficients
}
microbenchmark(
serial   = boot::boot( trees, my.fun, R=1000 ),
parallel = boot::boot( trees, my.fun, R=1000,
parallel='multicore', ncpus=2 )
) %>% print(digits=3)
library(lattice)
data(Investment, package="sandwich")
Investment <- as.data.frame(Investment)
Investment
plot1 <- xyplot(mpg ~ disp, data=mtcars,
aspect=1, xlim=c(65, 480), ylim=c(9, 35),
subset=gear == 5)
plot2 <- xyplot(mpg ~ disp, data=mtcars,
aspect=1, xlim=c(65, 480), ylim=c(9, 35),
subset=gear == 4)
plot3 <- xyplot(mpg ~ disp, data=mtcars,
aspect=1, xlim=c(65, 480), ylim=c(9, 35),
subset=gear == 3)
print(plot1, position=c(0, 2/3, 1, 1), more=TRUE)
print(plot2, position=c(0, 1/3, 1, 2/3), more=TRUE)
print(plot3, position=c(0, 0, 1, 1/3))
xyplot(mpg ~ disp | factor(gear), data=mtcars,
layout=c(3, 1), aspect=2,
panel=function(x, y) {
panel.lmline(x, y)
panel.xyplot(x, y)
})
data(USCancerRates)
segplot(reorder(factor(county), rate.male) ~ LCL95.male + UCL95.male,
data = subset(USCancerRates, state == "Washington"))
segplot(reorder(factor(county), rate.male) ~ LCL95.male + UCL95.male,
data = subset(USCancerRates, state == "Washington"),
draw.bands = FALSE, centers = rate.male)
segplot(reorder(factor(county), rate.male) ~ LCL95.male + UCL95.male,
data = subset(USCancerRates, state == "Washington"),
level = rate.female, col.regions = terrain.colors)
segplot(reorder(factor(county), rate.male) ~ LCL95.male + UCL95.male,
data = subset(USCancerRates, state == "Washington"),
draw.bands = FALSE, centers = rate.male,
segments.fun = panel.arrows, ends = "both",
angle = 90, length = 1, unit = "mm")
library(latticeExtra)
data(USCancerRates)
segplot(reorder(factor(county), rate.male) ~ LCL95.male + UCL95.male,
data = subset(USCancerRates, state == "Washington"))
segplot(reorder(factor(county), rate.male) ~ LCL95.male + UCL95.male,
data = subset(USCancerRates, state == "Washington"),
draw.bands = FALSE, centers = rate.male)
segplot(reorder(factor(county), rate.male) ~ LCL95.male + UCL95.male,
data = subset(USCancerRates, state == "Washington"),
level = rate.female, col.regions = terrain.colors)
segplot(reorder(factor(county), rate.male) ~ LCL95.male + UCL95.male,
data = subset(USCancerRates, state == "Washington"),
draw.bands = FALSE, centers = rate.male,
segments.fun = panel.arrows, ends = "both",
angle = 90, length = 1, unit = "mm")
xyplot(sunspot.year, panel = panel.xyarea, origin = 0,
aspect = "xy", cut = list(n = 4, overlap = 0))
View(Investment)
??Investment
??investment
shiny::runApp('testappr')
runApp('testappr')
runApp('testappr')
runApp('testappr')
shiny::runApp('testappr')
runApp('ShinyApp')
rm(list=ls()
View(birthwt)
shiny::runApp('ShinyApp')
